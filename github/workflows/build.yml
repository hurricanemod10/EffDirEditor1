# main.py
# Effect Dir Editor v1.0

import sys
import os
from read_effdir import read_effdir
from write_effdir import write_effdir
from isolate_eff import isolate_eff

APP_NAME = "Effect Dir Editor v1.0"

def main():
    print(f"Launching {APP_NAME}...")
    
    # Example workflow (you can customize)
    effdir_path = input("Enter path to EffDir file: ").strip()
    if not os.path.exists(effdir_path):
        print(f"Error: File '{effdir_path}' not found.")
        sys.exit(1)

    try:
        effdir = read_effdir(effdir_path)
        print("EffDir read successfully.")

        # Example isolate step
        index = int(input("Enter section index to isolate: "))
        unique_name = input("Enter new unique effect name: ").strip()

        new_effdir = isolate_eff(effdir, index, unique_name)
        output_path = f"isolated_{os.path.basename(effdir_path)}"
        write_effdir(new_effdir, output_path)

        print(f"✅ Isolated EffDir saved to {output_path}")
        print(f"{APP_NAME} finished successfully.")

    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

name: Auto Build and Version EffDirEditor

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write  # Needed to push version updates

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read and bump version
        id: versioning
        shell: pwsh
        run: |
          $versionFile = "version.txt"
          $version = Get-Content $versionFile | ForEach-Object { $_.Trim() }
          Write-Host "Current version: $version"
          $parts = $version.Split('.')
          if ($parts.Count -gt 1) {
              $parts[-1] = [int]$parts[-1] + 1
          } else {
              $parts += "1"
          }
          $newVersion = $parts -join '.'
          Write-Host "New version: $newVersion"
          Set-Content $versionFile $newVersion
          echo "version=$newVersion" >> $env:GITHUB_OUTPUT

      - name: Commit new version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add version.txt
          git commit -m "Auto bump version to v${{ steps.versioning.outputs.version }}"
          git push

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: |
          $version = "${{ steps.versioning.outputs.version }}"
          pyinstaller main.py --name "Effect Dir Editor v$version" --onefile
          mkdir build_output
          copy dist/"Effect Dir Editor v$version.exe" build_output/

      - name: Package build artifact
        run: |
          $version = "${{ steps.versioning.outputs.version }}"
          powershell Compress-Archive -Path build_output -DestinationPath "EffDirEditor-Package-v$version.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: EffDirEditor-Package-v${{ steps.versioning.outputs.version }}
          path: EffDirEditor-Package-v${{ steps.versioning.outputs.version }}.zip
